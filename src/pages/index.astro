---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Welcome to Astro.">
  <main>
    <multiplication-view>
      <div class="log">
        累計全問正解数<span class="log-count"></span>
      </div>
      <div class="progress"></div>
      <h3>
        <span class="correct-count"></span>
      </h3>
      <div class="multiplication-body">
        <h2></h2>
        <h1 class="product"></h1>
        <div class="ui">
          <button class="clear-button">clear</button>
          <button class="ok-button">OK</button>
        </div>
        <div class="num-buttons">
          {Array(10).fill('').map((_,index) => (
            <button
              class="num-button"
              data-num={index === 9 ? 0 : index + 1}
            >
              {index === 9 ? 0 : index + 1}
            </button>
          ))}
        </div>
      </div>
      <div class="result">
        <img class="result-img" src="" alt="">
      </div>
    </multiplication-view>
  </main>
</Layout>

<script>
  import { lsGet, lsSet } from '../lib/ls'
  
  type XY = {
    x: number;
    y: number;
  }

  const successPics = [
    'https://img.atwiki.jp/toshiaki-wiki/attach/30/23/yarujanai.jpg',
    'https://d2dcan0armyq93.cloudfront.net/photo/odai/600/4ac85e0359f272ab61913b6d52020f84_600.jpg',
    'https://pics.prcm.jp/a8261541dacc7/84923849/jpeg/84923849.jpeg',
    'https://pbs.twimg.com/media/EmsXYtKVcAAk5Qc?format=jpg&name=small',
    'https://image.minne.com/minne/mobile_app_product/680x680cq85/8381a83017843d423d0173eb0d14b7955e01e82b.jpeg/productimages/94443245/w1600xh1600/ad5c6bf24378ebf333f271ce661d20a271a8e7bc.png?1592966099',
    'https://pics.prcm.jp/2d22a46df5f2d/71245630/jpeg/71245630_480x326.jpeg',
    'https://pics.prcm.jp/mnheer/49962984/jpeg/49962984.jpeg',
  ];

  const failurePics = [
    'https://pics.prcm.jp/2d22a46df5f2d/71245604/jpeg/71245604_480x323.jpeg',
    'https://pics.prcm.jp/2d22a46df5f2d/71245610/jpeg/71245610.jpeg',
    'https://pics.prcm.jp/2d22a46df5f2d/71245613/jpeg/71245613_480x322.jpeg',
    'https://pics.prcm.jp/2d22a46df5f2d/71245636/jpeg/71245636_480x319.jpeg',
    'https://pics.prcm.jp/1d39ab5e73578/80478352/jpeg/80478352.jpeg',
    'https://cdn-ak.f.st-hatena.com/images/fotolife/t/tamaohioki/20170202/20170202211339.jpg',
  ];

  const multiplicationTable = () => {
    const container: XY[] = [];
    const nine = Array(9).fill(null);
    nine.forEach((_, xi) => {
      nine.forEach((_, yi)=> {
        container.push({
          x: xi + 1,
          y: yi + 1,
        })
      })
    })
    return container.sort(() => Math.random() - Math.random());
  }
  
  class MultiplicationView extends HTMLElement {
    fullCount: number;
    m: XY[];
    cellView:HTMLElement;
    correctCount: number;
    successCount: number;

    constructor() {
      super();
      this.fullCount = 81;
      this.m = multiplicationTable();

      const ok = this.querySelector('.ok-button')!;
      const clear = this.querySelector('.clear-button')!;
      const numButton = this.querySelectorAll('.num-button')!;
      this.cellView = this.querySelector('h2')!;
      const product = this.querySelector('.product')!;
      this.correctCount = 0;
      this.successCount = lsGet('_81_consecutive_success_count') || 0;
      const logCount = this.querySelector('.log-count')! as HTMLElement;
      logCount.textContent = String(this.successCount);
      if(this.successCount >= 50) {
        logCount.classList.add('complete')
      }

      this.question()
      ok.addEventListener('click', () => {
        const p = parseInt(this.cellView.dataset.product || '0');
        if(p === parseInt(product.textContent || '0')) {
          product.classList.add('correct');
          product.textContent = '○';
          this.correctCount += 1;
        } else {
          product.classList.add('incorrect');
          product.textContent = '✗';
        }
        setTimeout(() => {
          product.classList.remove('correct');
          product.classList.remove('incorrect');
          product.textContent = '';
          this.question();
        }, 1000);
      });
      clear.addEventListener('click', () => {
        product.textContent = '';
      });
      numButton.forEach(el => {
        el.addEventListener('click', (e:Event) => {
          const trg = e.currentTarget as HTMLElement;
          product.textContent = `${product.textContent || ''}${trg.dataset.num}`.slice(-2);
        })
      })
    }

    question() {
      const c = this.m.pop();
      const progress = this.querySelector('.progress')! as HTMLElement;
      progress.style.width = `${(this.fullCount - this.m.length) / this.fullCount * 100}%`;
      const corerectCount = this.querySelector('.correct-count')!;
      corerectCount.textContent = `正解数 ${this.correctCount}`;
      if(c) {
        this.cellView.textContent = `${c.x} x ${c.y} = ?`;
        this.cellView.dataset.product = String(c.x * c.y);
      } else {
        this.finish();
      }
    }

    finish() {
      lsSet<number>(
        this.correctCount === 81 ? 
          this.successCount + 1 : this.successCount,
        '_81_consecutive_success_count'
      );
      const body = this.querySelector('.multiplication-body') as HTMLElement;
      const result = this.querySelector('.result') as HTMLElement;
      const resultImg = this.querySelector('.result-img') as HTMLImageElement;
      if(this.correctCount === 81) {
        resultImg.src = successPics[Math.floor(Math.random() * successPics.length)]
      } else {
        resultImg.src = failurePics[Math.floor(Math.random() * failurePics.length)]
      }
      body.style.display = 'none';
      result.style.display = 'block';
      
      const logCount = this.querySelector('.log-count')! as HTMLElement;
      logCount.textContent = String(lsGet('_81_consecutive_success_count') || 0);
      if(this.successCount + 1 >= 50 ) {
        logCount.classList.add('complete')
      }
    }
  }

  customElements.define('multiplication-view', MultiplicationView);
</script>

<style>
  :root {
    font-size: 3svw;
  }
  main {
    position: relative;
    margin: auto;
    width: 100%;
    height: 100%;
    color: white;
    font-size: 2rem;
    line-height: 1.6;
    text-shadow: .1rem .1rem #fe3482;
  }
  .result {
    display: none;
    width: 20rem;
    overflow: hidden;
    margin: 6rem auto 0;
  }
  .result-img {
    object-fit: contain;
    width: 100%;
    height: 100%;
  }
  .log {
    position: absolute;
    right: .8rem;
    bottom: .8rem;
    font-size: 1rem;
  }
  .log-count {
    display: inline-block;
    margin-left: .3rem;
    font-size: 1.4rem;
  }
  .log-count.complete {
    color: red;
    font-size: 2rem;
  }
  .progress {
    display: block;
    width: 0%;
    height: .5rem;
    background-color: #F172A3;
  }
  h1 {
    text-align: center;
    font-size: 2.8rem;
    line-height: 1;
    height: 3rem;
    margin: 1rem auto;
  }
  h1.correct {
    font-weight: 600;
    text-shadow: .1rem .1rem red;
  }
  h1.incorrect {
    font-weight: 600;
    text-shadow: .1rem .1rem blue;
  }
  h2 {
    text-align: center;
    margin: 0 auto;
    font-size: 2.5rem;
  }
  h3 {
    text-align: center;
    margin-bottom: .5rem;
    font-size: 1rem;
  }
  .ui {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
    width: 20rem;
    margin: 2rem auto 0;
  }
  .ui button {
    width: calc((100% - 1rem)/2);
    height: 3.8rem;
    font-size: 1.4rem;
    font-weight: 600;
  }
  .num-buttons {
    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(3, calc((100% - 2rem)/3));
    width: 18rem;
    margin: 2rem auto 0;
  }
  .num-buttons button {
    height: 4rem;
    font-size: 1.6rem;
    font-weight: 600;
  }
  .num-buttons button:last-child {
    grid-column: 2/3;
  }

  @media (820px < width) {
    :root {
      font-size: 16px;
    }
  }
</style>
