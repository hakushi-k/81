---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Welcome to Astro.">
  <main>
    <multiplication-view>
      <h2></h2>
      <h1 class="product"></h1>
      <div class="ui">
        <button class="clear-button">clear</button>
        <button class="ok-button">OK</button>
      </div>
      <div class="num-buttons">
        {Array(10).fill('').map((_,index) => (
          <button
            class="num-button"
            data-num={index === 9 ? 0 : index + 1}
          >
            {index === 9 ? 0 : index + 1}
          </button>
        ))}
      </div>
    </multiplication-view>
  </main>
</Layout>

<script>
  type XY = {
    x: number;
    y: number;
  }

  const multiplicationTable = () => {
    const container: XY[] = [];
    const nine = Array(9).fill(null);
    nine.forEach((_, xi) => {
      nine.forEach((_, yi)=> {
        container.push({
          x: xi + 1,
          y: yi + 1,
        })
      })
    })
    return container.sort(() => Math.random() - Math.random());
  }
  
  class MultiplicationView extends HTMLElement {
    m: XY[];
    cellView:HTMLElement;
    constructor() {
      super();
      this.m = multiplicationTable();

      const ok = this.querySelector('.ok-button')!;
      const clear = this.querySelector('.clear-button')!;
      const numButton = this.querySelectorAll('.num-button')!;
      this.cellView = this.querySelector('h2')!;
      const product = this.querySelector('.product')!;

      this.question()
      ok.addEventListener('click', () => {
        const p = parseInt(this.cellView.dataset.product || '0');
        if(this.cellView.dataset.product === product.textContent) {
          product.textContent = '正解 ヽ(*^^*)ノ';
        } else {
          product.textContent = '不正解 ( ´·︵·` )';
        }
        setTimeout(() => {
          product.textContent = '';
          this.question();
        }, 2000);
      });
      clear.addEventListener('click', () => {
        product.textContent = '';
      });
      numButton.forEach(el => {
        el.addEventListener('click', (e:Event) => {
          const trg = e.currentTarget as HTMLElement;
          product.textContent = `${product.textContent || ''}${trg.dataset.num}`.slice(-2);
        })
      })
    }

    question() {
      const c = this.m.pop();
      if(c) {
        this.cellView.textContent = `${c.x} x ${c.y} = ?`;
        this.cellView.dataset.product = String(c.x * c.y);
      } else {
        const product = this.querySelector('.product')!;
        product.textContent = 'おわり'
      }
    }
  }

  customElements.define('multiplication-view', MultiplicationView);
</script>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 500px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  h1 {
    text-align: center;
    font-size: 3em;
    height: 3.5rem;
    margin-top: 0;
  }
  h2 {
    text-align: center;
    margin-bottom: 20px;
  }
  .ui {
    display: flex;
    justify-content: space-between;
    gap: 10px;
    width: 250px;
    margin: 60px auto 0;
  }
  .ui button {
    width: calc((100% - 10px)/2);
    height: 40px;
  }
  .num-buttons {
    display: grid;
    gap: 10px;
    grid-template-columns: repeat(3, calc((100% - 20px)/3));
    width: 200px;
    margin: 30px auto 0;
  }
  .num-buttons button {
    height: 50px;
  }
  .num-buttons button:last-child {
    grid-column: 1/4;
  }
</style>
